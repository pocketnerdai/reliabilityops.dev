---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { client } from '../../sanity/lib/client';
import { postBySlugQuery } from '../../sanity/lib/queries';
import { urlForImage } from '../../sanity/lib/image';

const { slug } = Astro.params;
const post = await client.fetch(postBySlugQuery, { slug });

if (!post) {
  return Astro.redirect('/404');
}

// Cache settings
Astro.response.headers.set('Cache-Control', 'public, max-age=3600, stale-while-revalidate=300');

// Helper function to render images with error handling
function renderImage(block) {
  try {
    if (!block.asset || !block.asset._ref) {
      console.error('Image block missing asset reference');
      return ''; // Return empty string instead of throwing
    }
    const imageUrl = urlForImage(block).width(800).url();
    return `<img src="${imageUrl}" alt="${block.alt || ''}" class="rounded-lg shadow-xl my-6 w-full" />`;
  } catch (error) {
    console.error('Error rendering image:', error);
    return ''; // Return empty string on error
  }
}

// Complete function to render Portable Text with all block types
function renderContent(blocks) {
  if (!blocks || !Array.isArray(blocks)) return '';
  
  let html = '';
  let listItems = [];
  let currentListType = null;
  
  // Helper to close any open list
  const closeList = () => {
    if (listItems.length > 0) {
      const tag = currentListType === 'number' ? 'ol' : 'ul';
      const listClass = currentListType === 'number' ? 'list-decimal' : 'list-disc';
      html += `<${tag} class="${listClass} list-inside mb-4 space-y-2">`;
      listItems.forEach(item => {
        html += `<li class="text-slate-300">${item}</li>`;
      });
      html += `</${tag}>`;
      listItems = [];
      currentListType = null;
    }
  };
  
  blocks.forEach(block => {
    try {
      // Handle different block types
      if (block._type === 'block') {
        // Check if this is a list item
        if (block.listItem) {
          // If switching list types, close previous list
          if (currentListType && currentListType !== block.listItem) {
            closeList();
          }
          currentListType = block.listItem;
          
          // Extract text from children
          let text = '';
          if (block.children) {
            block.children.forEach(child => {
              if (child.text) {
                let segment = child.text;
                
                // Handle marks (bold, italic, etc)
                if (child.marks && child.marks.length > 0) {
                  child.marks.forEach(mark => {
                    if (mark === 'strong') {
                      segment = `<strong class="font-semibold text-white">${segment}</strong>`;
                    } else if (mark === 'em') {
                      segment = `<em>${segment}</em>`;
                    } else if (mark === 'code') {
                      segment = `<code class="text-emerald-400 bg-slate-800 px-1 py-0.5 rounded">${segment}</code>`;
                    } else if (block.markDefs) {
                      // Handle links
                      const markDef = block.markDefs.find(def => def._key === mark);
                      if (markDef && markDef._type === 'link') {
                        segment = `<a href="${markDef.href}" class="text-emerald-400 hover:text-emerald-300 underline">${segment}</a>`;
                      }
                    }
                  });
                }
                
                text += segment;
              }
            });
          }
          
          listItems.push(text);
        } else {
          // Not a list item - close any open list first
          closeList();
          
          // Handle different text styles
          const style = block.style || 'normal';
          let text = '';
          
          if (block.children) {
            block.children.forEach(child => {
              if (child.text) {
                let segment = child.text;
                
                // Handle marks
                if (child.marks && child.marks.length > 0) {
                  child.marks.forEach(mark => {
                    if (mark === 'strong') {
                      segment = `<strong class="font-semibold text-white">${segment}</strong>`;
                    } else if (mark === 'em') {
                      segment = `<em>${segment}</em>`;
                    } else if (mark === 'code') {
                      segment = `<code class="text-emerald-400 bg-slate-800 px-1 py-0.5 rounded">${segment}</code>`;
                    } else if (block.markDefs) {
                      const markDef = block.markDefs.find(def => def._key === mark);
                      if (markDef && markDef._type === 'link') {
                        segment = `<a href="${markDef.href}" class="text-emerald-400 hover:text-emerald-300 underline">${segment}</a>`;
                      }
                    }
                  });
                }
                
                text += segment;
              }
            });
          }
          
          // Apply appropriate HTML tag based on style
          switch (style) {
            case 'h1':
              html += `<h1 class="text-4xl font-bold text-white mb-4 mt-8">${text}</h1>`;
              break;
            case 'h2':
              html += `<h2 class="text-3xl font-bold text-white mb-4 mt-8">${text}</h2>`;
              break;
            case 'h3':
              html += `<h3 class="text-2xl font-semibold text-white mb-3 mt-6">${text}</h3>`;
              break;
            case 'h4':
              html += `<h4 class="text-xl font-semibold text-white mb-3 mt-4">${text}</h4>`;
              break;
            case 'blockquote':
              html += `<blockquote class="border-l-4 border-emerald-500 pl-4 italic mb-4 text-slate-300">${text}</blockquote>`;
              break;
            case 'normal':
            default:
              if (text.trim()) {
                html += `<p class="text-slate-300 mb-4 leading-relaxed">${text}</p>`;
              }
              break;
          }
        }
      } else if (block._type === 'image') {
        closeList(); // Close any open list before image
        html += renderImage(block);
      } else if (block._type === 'code') {
        closeList(); // Close any open list before code
        const language = block.language || 'text';
        const code = block.code || '';
        html += `<pre class="bg-slate-800 border border-slate-700 rounded-lg p-4 mb-4 overflow-x-auto"><code class="language-${language} text-slate-300">${code}</code></pre>`;
      }
    } catch (error) {
      console.error('Error rendering block:', error);
      // Continue with next block instead of breaking entire render
    }
  });
  
  // Close any remaining open list
  closeList();
  
  return html;
}


// Wrap rendering in try-catch to prevent 500 errors
let bodyHtml = '';
let heroImageUrl = null;

try {
  bodyHtml = renderContent(post.body);
} catch (error) {
  console.error('Error rendering content:', error);
  bodyHtml = '<p class="text-red-400">Error rendering content. Please check the console for details.</p>';
}

try {
  heroImageUrl = post.heroImage ? urlForImage(post.heroImage).width(1200).height(600).url() : null;
} catch (error) {
  console.error('Error rendering hero image:', error);
  heroImageUrl = null;
}

---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={post.title} description={post.excerpt} />
    <style>
      html {
        scroll-behavior: smooth;
      }
    </style>
  </head>

  <body>
    <Header />
    <main class="min-h-screen bg-slate-900 pt-20">
      <article>
        {heroImageUrl && (
          <div class="w-full max-w-6xl mx-auto px-4 mb-8">
            <img 
              src={heroImageUrl}
              alt={post.title}
              class="w-full h-auto rounded-xl shadow-2xl"
            />
          </div>
        )}
        
        <div class="container mx-auto px-4 py-8 max-w-4xl">
          <div class="text-center mb-8">
            <div class="text-slate-400 mb-4">
              <FormattedDate date={new Date(post.publishedAt)} />
            </div>
            <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">{post.title}</h1>
            <p class="text-xl text-slate-300">{post.excerpt}</p>
          </div>
          
          <hr class="border-slate-700 mb-8" />
          
          <!-- Article Body -->
          <div class="prose prose-lg prose-invert prose-slate max-w-none
            prose-headings:text-white 
            prose-p:text-slate-300 prose-p:mb-4
            prose-a:text-emerald-400 prose-a:hover:text-emerald-300
            prose-strong:text-white prose-strong:font-semibold
            prose-code:text-emerald-400 prose-code:bg-slate-800 
            prose-blockquote:border-l-4 prose-blockquote:border-emerald-500">
            <div set:html={bodyHtml}></div>
          </div>
          
          <div class="mt-16 pt-8 border-t border-slate-700">
            <a href="/blog" class="text-emerald-400 hover:text-emerald-300 transition-colors flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Back to Blog
            </a>
          </div>
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>