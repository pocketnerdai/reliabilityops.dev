---
// Stats counter with animated numbers
---

<section id="stats" class="py-20 bg-gradient-to-b from-slate-900 to-slate-800 relative overflow-hidden">
  <!-- Background pattern -->
  <div class="absolute inset-0 opacity-10">
    <div class="absolute inset-0" style="background-image: url('data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%2310b981" fill-opacity="0.4"%3E%3Cpath d="M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E');"></div>
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">
        Results That Speak for Themselves
      </h2>
      <p class="text-xl text-slate-300 max-w-2xl mx-auto">
        Measurable impact on reliability, performance, and cost savings
      </p>
    </div>

    <div class="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto">
      <!-- Stat 1: Uptime -->
      <div class="stat-card">
        <div class="stat-value">
          <span class="counter" data-target="99.99" data-suffix="%">0</span>
        </div>
        <div class="stat-label">Uptime Achieved</div>
        <div class="stat-icon">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
      </div>

      <!-- Stat 2: Incidents Prevented -->
      <div class="stat-card">
        <div class="stat-value">
          <span class="counter" data-target="500" data-suffix="+">0</span>
        </div>
        <div class="stat-label">Incidents Prevented</div>
        <div class="stat-icon">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
          </svg>
        </div>
      </div>

      <!-- Stat 3: Response Time -->
      <div class="stat-card">
        <div class="stat-value">
          <span class="counter" data-target="50" data-suffix="ms">0</span>
        </div>
        <div class="stat-label">Response Time</div>
        <div class="stat-icon">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
        </div>
      </div>

      <!-- Stat 4: Cost Savings -->
      <div class="stat-card">
        <div class="stat-value">
          <span class="counter" data-target="2.8" data-prefix="$" data-suffix="M+">0</span>
        </div>
        <div class="stat-label">Cost Savings</div>
        <div class="stat-icon">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
      </div>
    </div>

    <!-- Additional context -->
    <div class="text-center mt-12">
      <p class="text-slate-400 text-sm">
        * Based on average client results over the past 24 months
      </p>
    </div>
  </div>
</section>

<style>
  .stat-card {
    @apply bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-xl p-6;
    @apply text-center relative overflow-hidden;
    @apply transition-all duration-300;
    @apply hover:border-emerald-500/50 hover:shadow-lg hover:shadow-emerald-500/10;
    opacity: 0;
    transform: translateY(20px);
  }

  .stat-card.in-view {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .stat-card:nth-child(1).in-view { animation-delay: 0s; }
  .stat-card:nth-child(2).in-view { animation-delay: 0.1s; }
  .stat-card:nth-child(3).in-view { animation-delay: 0.2s; }
  .stat-card:nth-child(4).in-view { animation-delay: 0.3s; }

  .stat-value {
    @apply text-3xl md:text-4xl font-bold text-emerald-400 mb-2;
    @apply tabular-nums;
  }

  .stat-label {
    @apply text-slate-300 font-medium;
  }

  .stat-icon {
    @apply absolute top-4 right-4 text-emerald-500/20;
  }

  .stat-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, transparent 40%, rgba(16, 185, 129, 0.05) 100%);
    pointer-events: none;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Pulse animation for numbers after counting */
  .counter.counted {
    animation: pulse 0.3s ease-out;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }
</style>

<script>
  // Counter animation function
  function animateCounter(element: HTMLElement) {
    const target = parseFloat(element.getAttribute('data-target') || '0');
    const prefix = element.getAttribute('data-prefix') || '';
    const suffix = element.getAttribute('data-suffix') || '';
    const duration = 2000; // 2 seconds
    const increment = target / (duration / 16); // 60fps
    let current = 0;
    
    const updateCounter = () => {
      current += increment;
      
      if (current < target) {
        // Format the number based on whether it has decimals
        const formattedNumber = target % 1 === 0 
          ? Math.floor(current).toString()
          : current.toFixed(2);
        
        element.textContent = prefix + formattedNumber + suffix;
        requestAnimationFrame(updateCounter);
      } else {
        // Set final value
        const finalNumber = target % 1 === 0 
          ? target.toString()
          : target.toFixed(2);
        
        element.textContent = prefix + finalNumber + suffix;
        element.classList.add('counted');
      }
    };
    
    updateCounter();
  }

  // Intersection Observer for triggering animations
  const observerOptions = {
    threshold: 0.5,
    rootMargin: '0px 0px -100px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Animate stat cards
        if (entry.target.classList.contains('stat-card')) {
          entry.target.classList.add('in-view');
        }
        
        // Animate counters
        const counter = entry.target.querySelector('.counter');
        if (counter && !counter.classList.contains('counted')) {
          setTimeout(() => {
            animateCounter(counter as HTMLElement);
          }, 300); // Small delay for better effect
        }
        
        // Stop observing after animation
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all stat cards
  document.querySelectorAll('.stat-card').forEach(card => {
    observer.observe(card);
  });
</script>