---
import BlogCard from '../BlogCard.astro';
import { client } from '../../sanity/lib/client';
import { postsQuery } from '../../sanity/lib/queries';

// Fetch latest 3 posts from Sanity
let posts = [];
let loading = true;

try {
  const data = await client.fetch(postsQuery);
  posts = data.slice(0, 3);
  loading = false;
} catch (error) {
  console.error('Error fetching posts:', error);
  loading = false;
}

// Calculate read time (rough estimate)
const calculateReadTime = (content: string) => {
  const wordsPerMinute = 200;
  const words = content?.split(/\s+/).length || 0;
  return Math.ceil(words / wordsPerMinute);
};
---

<section id="latest-posts" class="py-20 bg-slate-800/50">
  <div class="container mx-auto px-4">
    <div class="flex justify-between items-center mb-12">
      <div>
        <h2 class="text-3xl md:text-4xl font-bold text-white mb-2">Latest Insights</h2>
        <p class="text-xl text-slate-300">Thoughts on reliability, AI, and DevOps</p>
      </div>
      <a href="/blog" class="hidden sm:flex items-center gap-2 text-emerald-400 hover:text-emerald-300 transition-colors font-medium">
        View all posts
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
        </svg>
      </a>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {loading ? (
        <>
          <!-- Skeleton loaders -->
          <div class="skeleton-card">
            <div class="skeleton skeleton-image"></div>
            <div class="p-6">
              <div class="skeleton skeleton-title"></div>
              <div class="skeleton skeleton-text mt-2"></div>
              <div class="skeleton skeleton-text mt-2 w-4/5"></div>
              <div class="flex gap-4 mt-4">
                <div class="skeleton skeleton-meta"></div>
                <div class="skeleton skeleton-meta"></div>
              </div>
            </div>
          </div>
          <div class="skeleton-card">
            <div class="skeleton skeleton-image"></div>
            <div class="p-6">
              <div class="skeleton skeleton-title"></div>
              <div class="skeleton skeleton-text mt-2"></div>
              <div class="skeleton skeleton-text mt-2 w-4/5"></div>
              <div class="flex gap-4 mt-4">
                <div class="skeleton skeleton-meta"></div>
                <div class="skeleton skeleton-meta"></div>
              </div>
            </div>
          </div>
          <div class="skeleton-card">
            <div class="skeleton skeleton-image"></div>
            <div class="p-6">
              <div class="skeleton skeleton-title"></div>
              <div class="skeleton skeleton-text mt-2"></div>
              <div class="skeleton skeleton-text mt-2 w-4/5"></div>
              <div class="flex gap-4 mt-4">
                <div class="skeleton skeleton-meta"></div>
                <div class="skeleton skeleton-meta"></div>
              </div>
            </div>
          </div>
        </>
      ) : posts.length > 0 ? (
        posts.map((post, index) => (
          <div class="blog-card-wrapper" style={`animation-delay: ${index * 0.1}s;`}>
            <BlogCard
              title={post.title}
              excerpt={post.excerpt}
              date={new Date(post.publishedAt)}
              slug={post.slug.current}
              readTime={post.readTime || 5}
              tags={post.categories || ['SRE', 'AI']}
            />
          </div>
        ))
      ) : (
        <!-- Empty state -->
        <div class="col-span-full text-center py-12">
          <svg class="w-16 h-16 mx-auto text-slate-600 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
          </svg>
          <p class="text-slate-400 mb-4">No blog posts available yet</p>
          <a href="/contact" class="text-emerald-400 hover:text-emerald-300 transition-colors">
            Get in touch instead â†’
          </a>
        </div>
      )}
    </div>
    
    <!-- Mobile view all link -->
    <div class="text-center mt-8 sm:hidden">
      <a href="/blog" class="inline-flex items-center gap-2 text-emerald-400 hover:text-emerald-300 transition-colors font-medium">
        View all posts
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  /* Skeleton loader styles */
  .skeleton-card {
    @apply bg-slate-800/50 rounded-xl overflow-hidden;
    @apply border border-slate-700/50;
  }

  .skeleton {
    @apply bg-slate-700/50 rounded;
    position: relative;
    overflow: hidden;
  }

  .skeleton::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%);
    animation: shimmer 1.5s infinite;
  }

  .skeleton-image {
    @apply h-48 w-full;
  }

  .skeleton-title {
    @apply h-6 w-3/4;
  }

  .skeleton-text {
    @apply h-4 w-full;
  }

  .skeleton-meta {
    @apply h-4 w-20;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  /* Blog card animation */
  .blog-card-wrapper {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease-out forwards;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Override BlogCard styles for better integration */
  :global(.blog-card) {
    height: 100%;
    @apply hover:-translate-y-1;
  }
</style>

<script>
  // Add intersection observer for blog cards
  const blogCards = document.querySelectorAll('.blog-card-wrapper');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.opacity = '1';
        entry.target.style.transform = 'translateY(0)';
      }
    });
  }, { threshold: 0.1 });

  blogCards.forEach(card => {
    observer.observe(card);
  });
</script>